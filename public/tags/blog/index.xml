<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on 男胖友de部落格</title>
    <link>http://example.org/tags/blog/</link>
    <description>Recent content in blog on 男胖友de部落格</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Sep 2019 15:25:24 +0000</lastBuildDate><atom:link href="http://example.org/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>js-继承</title>
      <link>http://example.org/post/js-%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Mon, 23 Sep 2019 15:25:24 +0000</pubDate>
      
      <guid>http://example.org/post/js-%E7%BB%A7%E6%89%BF/</guid>
      <description>使用 JavaScript 实现继承 要求： 要求不使用 class，完成如下需求：
  写出一个构造函数 Animal 输入为空 输出为一个新对象，该对象的共有属性为 {行动: function(){}}，没有自有属性
  再写出一个构造函数 Human Human 继承 Animal 输入为一个对象，如 {name: &amp;lsquo;xxx&amp;rsquo;, birthday: &amp;lsquo;2000-10-10&amp;rsquo;} 输出为一个新对象，该对象自有的属性有 name 和 birthday，共有的属性有物种（人类）、行动和使用工具
  再写出一个构造函数 Asian Asian 继承 Human 输入为一个对象，如 {city: &amp;lsquo;北京&amp;rsquo;, name: &amp;lsquo;xxx&amp;rsquo;, birthday: &amp;lsquo;2000-10-10&amp;rsquo; } 输出为一个新对象，改对象自有的属性有 name city 和 bitrhday，共有的属性有物种、行动和使用工具和肤色 既
  最后一个新对象是 Asian 构造出来的
 Asian 继承 Human，Human 继承 Animal 使用原型链
function Animal(){ } Animal.prototype.行动 = function(){} function Human(options){ this.</description>
    </item>
    
    <item>
      <title>js-异步</title>
      <link>http://example.org/post/js-%E5%BC%82%E6%AD%A5/</link>
      <pubDate>Mon, 09 Sep 2019 11:04:01 +0000</pubDate>
      
      <guid>http://example.org/post/js-%E5%BC%82%E6%AD%A5/</guid>
      <description>同步和异步 同步： 等待结果 异步： 不等待结果
异步通常和回调一起出现，但是要注意，异步不是回调，回调也不一定是异步。
常见的异步代码  获取图片的宽高   var w = document.getElementByTagName(&#39;img&#39;)[0].width console.log(w) //0 解决办法：
使用 img 的 onload(表示图片已经下载并加载完成)事件来重新触发获取宽度的函数
 var img = document.getElementByTagName(&#39;img&#39;)[0] img.onload = function(){ var w = img.width console.log(w) } 事件绑定的异步   let liList = document.querySelectorAll(&#39;li&#39;) for ( var i = 0;i &amp;lt; liList.length; i++ ){ liList[i].on(&#39;click&#39;,function(){ console.log(i) }) } 解决办法：
将循环中变量的关键字 i 的声明关键字改为 let
 let liList = document.querySelectorAll(&#39;li&#39;) for ( let i = 0;i &amp;lt; liList.</description>
    </item>
    
    <item>
      <title>js-函数</title>
      <link>http://example.org/post/js-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Fri, 30 Aug 2019 10:33:22 +0000</pubDate>
      
      <guid>http://example.org/post/js-%E5%87%BD%E6%95%B0/</guid>
      <description>JavaScript 函数 js 中的函数
定义  匿名函数 具名函数 箭头函数  // 匿名函数 var fn = function(){ return 1 } fn2 = fn; fn.name //fn fn2.name //fn // 具名函数 function fn3(){ return 1 } //fn3的作用域是全局 var fn5 = function fn4(){ return 5 } //如果将一个具名函数赋值给一个变量，那么这个具名函数的作用域就是该函数的花括号内 //例如fn4这个具名函数赋值给了fn5 那么fn4存在的作用域就是fn4的花括号内 // 箭头函数 var fn = () =&amp;gt; {} var fn2 = e =&amp;gt; console.log(e) var fn3 = (a, b) =&amp;gt; { let c = a + b; return c; } 词法作用域（也叫静态作用域） var global = 1; function fn1(param1){ var local1 = &#39;local1&#39; var local2 = &#39;local2&#39; function fn2(param2){ var local2 = &#39;inner local2&#39; console.</description>
    </item>
    
  </channel>
</rss>
